version: "2.2"

services:
  portainer2:
    image: portainer/portainer-ce:latest
    container_name: portainer2
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${PORTAINER_DATA}:/data
    ports:
      - 9999:9000

  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - '2181'
    networks:
      - flink_zoo_net
    volumes:
      - zookeeper_data:/bitnami
    environment:
      - ZOO_SERVER_ID=1
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_SERVERS=zookeeper:2888:3888,zookeeper2:2888:3888,zookeeper3:2888:3888
  zookeeper2:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper2
    ports:
      - '2181'
    networks:
      - flink_zoo_net
    volumes:
      - zookeeper2_data:/bitnami
    environment:
      - ZOO_SERVER_ID=2
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_SERVERS=zookeeper:2888:3888,zookeeper2:2888:3888,zookeeper3:2888:3888
  zookeeper3:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper3
    ports:
      - '2181'
    networks:
      - flink_zoo_net
    volumes:
      - zookeeper3_data:/bitnami
    environment:
      - ZOO_SERVER_ID=3
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_SERVERS=zookeeper:2888:3888,zookeeper2:2888:3888,zookeeper3:2888:3888
  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
    # To learn about configuring Kafka for access across networks see
    # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    networks:
      - flink_zoo_net
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  schema-registry:
    image: confluentinc/cp-schema-registry:7.0.1
    container_name: schema-registry
    ports:
    # To learn about configuring Kafka for access across networks see
    # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "8081:8081"
    networks:
      - flink_zoo_net
    depends_on:
      - zookeeper
      - broker
    environment:
       SCHEMA_REGISTRY_HOST_NAME: schema-registry
       SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
       SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker:29092
       SCHEMA_REGISTRY_MASTER_ELIGIBILITY: "true"
  jobmanager:
    image: flink:test
    ports:
      - "8081"
    scale: 2
    depends_on:
      - zookeeper
      - zookeeper2
      - zookeeper3
    # networks:
    #   - zookeeper_zoo_net
    command: jobmanager
    networks:
      - flink_zoo_net
    volumes:
      - ${FLINK_HA}:/opt/flink/ha
      - ${FLINK_CODE}:/opt/flink/code
      - ${FLINK_JAR}:/opt/flink/jars
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        parallelism.default: 2
        high-availability: zookeeper
        high-availability.zookeeper.path.root: /flink
        high-availability.cluster-id: /cluster_one
        high-availability.storageDir: file:///opt/flink/ha
        high-availability.zookeeper.quorum: zookeeper:2181,zookeeper2:2181,zookeeper3:2181   
        zookeeper.sasl.disable: true    
  taskmanager:
    image: flink:test
    depends_on:
      - jobmanager
      - zookeeper
      - zookeeper2
      - zookeeper3
    # networks:
    #   - zookeeper_zoo_net
    command: taskmanager
    networks:
      - flink_zoo_net
    scale: 2
    volumes:
      - ${FLINK_HA}:/opt/flink/ha
      - ${FLINK_CODE}:/opt/flink/code
      - ${FLINK_JAR}:/opt/flink/jars
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 2 
        high-availability: zookeeper
        high-availability.zookeeper.path.root: /flink
        high-availability.cluster-id: /cluster_one
        high-availability.storageDir: file:///opt/flink/ha
        high-availability.zookeeper.quorum: zookeeper:2181,zookeeper2:2181,zookeeper3:2181 
        zookeeper.sasl.disable: true
  haproxy:
    image: haproxy:test
    restart: always
    depends_on:
      - jobmanager
    networks:
      - flink_zoo_net
    volumes:
      - ${HAPROXY_CFG}:/usr/local/etc/haproxy/haproxy.cfg
    env_file:
      - haproxy.env
    ports:
      - "8181:80"
      - "8404:8404"
  mysql:
    image: mysql
    container_name: mysql
    restart: always
    networks:
      - flink_zoo_net
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: test
    ports:
      - "3306:3306"
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    networks:
      - flink_zoo_net
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop-hive.env
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    networks:
      - flink_zoo_net
    volumes:
      - datanode:/hadoop/dfs/data
    env_file:
      - ./hadoop-hive.env
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    ports:
      - "9864"

  hadoop-client:
    image: crs4/hadoopclient:3.2.1
    networks:
      - flink_zoo_net
    volumes:
      - ${DATA}:/data
    environment:
      - NAMENODE_HOSTNAME=namenode

  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-server
    networks:
      - flink_zoo_net
    env_file:
      - ./hadoop-hive.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
    ports:
      - "10000:10000"
  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    networks:
      - flink_zoo_net
    env_file:
      - ./hadoop-hive.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:9870 datanode:9864 hive-metastore-postgresql:5432"
    ports:
      - "9083:9083"
  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql:2.3.0
    container_name: hive-metastore-postgresql
    networks:
      - flink_zoo_net
    ports:
      - "5432"
  presto-coordinator:
    image: shawnzhu/prestodb:0.181
    container_name: presto-coordinator
    ports:
      - "8080:8080"      
networks:
  flink_zoo_net:
    driver: "bridge"
volumes:
  zookeeper_data:
    driver: local
  zookeeper2_data:
    driver: local
  zookeeper3_data:
    driver: local
  namenode:
    driver: local
  datanode:
    driver: local